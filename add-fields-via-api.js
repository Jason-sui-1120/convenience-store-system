const { createClient } = require('@supabase/supabase-js');

// SupabaseÈÖçÁΩÆ
const supabaseUrl = 'https://nxogjfzasogjzbkpfwle.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im54b2dqZnphc29nanpia3Bmd2xlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mzg0MTYxOCwiZXhwIjoyMDY5NDE3NjE4fQ.6YP06hp4dKbPHXc_2-aAcQ_ACttb3EGa97VKXuFBsb4';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addSystemFields() {
  try {
    console.log('ÂºÄÂßã‰∏∫ inbound_records Ë°®Ê∑ªÂä†Á≥ªÁªüÂ≠óÊÆµ...');
    
    // ‰ΩøÁî® RPC Ë∞ÉÁî®ÊâßË°å SQL
    const sqlCommands = [
      `ALTER TABLE inbound_records ADD COLUMN IF NOT EXISTS created_by VARCHAR(255) DEFAULT 'system';`,
      `ALTER TABLE inbound_records ADD COLUMN IF NOT EXISTS updated_by VARCHAR(255) DEFAULT 'system';`,
      `ALTER TABLE inbound_records ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();`
    ];
    
    for (let i = 0; i < sqlCommands.length; i++) {
      const sql = sqlCommands[i];
      console.log(`ÊâßË°åSQL ${i + 1}:`, sql);
      
      const { data, error } = await supabase.rpc('exec_sql', { sql });
      
      if (error) {
        console.error(`SQL ${i + 1} ÊâßË°åÂ§±Ë¥•:`, error);
      } else {
        console.log(`‚úÖ SQL ${i + 1} ÊâßË°åÊàêÂäü`);
      }
    }
    
    // ÂàõÂª∫Ëß¶ÂèëÂô®ÂáΩÊï∞
    console.log('ÂàõÂª∫Ëß¶ÂèëÂô®ÂáΩÊï∞...');
    const triggerFunction = `
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = NOW();
          RETURN NEW;
      END;
      $$ language 'plpgsql';
    `;
    
    const { data: funcData, error: funcError } = await supabase.rpc('exec_sql', { sql: triggerFunction });
    
    if (funcError) {
      console.error('ÂàõÂª∫Ëß¶ÂèëÂô®ÂáΩÊï∞Â§±Ë¥•:', funcError);
    } else {
      console.log('‚úÖ Ëß¶ÂèëÂô®ÂáΩÊï∞ÂàõÂª∫ÊàêÂäü');
    }
    
    // ÂàõÂª∫Ëß¶ÂèëÂô®
    console.log('ÂàõÂª∫Ëß¶ÂèëÂô®...');
    const triggerSql = `
      DROP TRIGGER IF EXISTS update_inbound_records_updated_at ON inbound_records;
      CREATE TRIGGER update_inbound_records_updated_at
          BEFORE UPDATE ON inbound_records
          FOR EACH ROW
          EXECUTE FUNCTION update_updated_at_column();
    `;
    
    const { data: triggerData, error: triggerError } = await supabase.rpc('exec_sql', { sql: triggerSql });
    
    if (triggerError) {
      console.error('ÂàõÂª∫Ëß¶ÂèëÂô®Â§±Ë¥•:', triggerError);
    } else {
      console.log('‚úÖ Ëß¶ÂèëÂô®ÂàõÂª∫ÊàêÂäü');
    }
    
    // È™åËØÅÂ≠óÊÆµÊòØÂê¶Ê∑ªÂä†ÊàêÂäü
    console.log('È™åËØÅÂ≠óÊÆµÊ∑ªÂä†ÁªìÊûú...');
    const { data: columns, error: columnError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, column_default, is_nullable')
      .eq('table_name', 'inbound_records')
      .in('column_name', ['created_by', 'updated_by', 'updated_at']);
    
    if (columnError) {
      console.error('È™åËØÅÂ≠óÊÆµÂ§±Ë¥•:', columnError);
    } else {
      console.log('‚úÖ Â≠óÊÆµÈ™åËØÅÁªìÊûú:');
      console.table(columns);
    }
    
    console.log('üéâ Á≥ªÁªüÂ≠óÊÆµÊ∑ªÂä†ÂÆåÊàêÔºÅ');
    
  } catch (error) {
    console.error('Ê∑ªÂä†Â≠óÊÆµËøáÁ®ã‰∏≠Âá∫Èîô:', error);
  }
}

// ÊâßË°åÂáΩÊï∞
addSystemFields();